#Allen Simmons
#Week 4 Reverse_Linked List

class Node:
    def __init__(self, data): #constructors
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None #within Linkedlist is the head

    def reverse(self):
        if self.head is None:
            return

        word_start = self.head
        sentence_end = None
        sentence_start = None
        temp = self.head

        while temp is not None and temp.data != ' ':
            sentence_end = temp
            temp = temp.next


        if temp is None:
            return

        while temp is not None:
            temp_next = temp.next
            temp.next = word_start
            word_start = temp
            prev = None
            temp = temp_next
            sentence_start = temp

            while temp is not None and temp.data != ' ':
                prev = temp
                temp = temp.next
            prev.next = word_start
            word_start = sentence_start

            self.head = sentence_start
            sentence_end.next = None

    def push(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        temp = self.head
        while temp.next is not None:
            temp = temp.next
        temp.next = new_node

    def printList(self):
        temp = self.head
        while temp is not None:
            print(temp.data + "->", end="")
            temp = temp.next
        print('NULL')

llist = LinkedList()
llist.push('I')
llist.push(' ')
llist.push('L')
llist.push('O')
llist.push('V')
llist.push('E')
llist.push(' ')
llist.push('G')
llist.push('E')
llist.push('E')
llist.push('K')
llist.push('S')
llist.push(' ')
llist.push('F')
llist.push('O')
llist.push('R')
llist.push(' ')
llist.push('G')
llist.push('E')
llist.push('E')
llist.push('K')
llist.push('S')

print("Given Linked List")
llist.printList()
print("               ")
llist.reverse()
print("Reverse list")
llist.printList()
